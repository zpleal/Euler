package euler;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

/**
 * Highly divisible triangular number
 * Problem 12
 * 
 * The sequence of triangle numbers is generated by adding 
 * the natural numbers. So the 7th triangle number would be
 *  1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * 
 * We can see that 28 is the first triangle number to have over
 * five divisors.
 * 
 * What is the value of the first triangle number to have over 
 * five hundred divisors?
 * 
 * @param args
 */
public class P012 {
	private static final int MIN_DIVS = 5; //00;

	
	P012() {
		long nDivs = MIN_DIVS;
		long value = joinAllUpTo(nDivs);
		
		long first = lookup(nDivs,value);
		System.out.println(first);
	}
	
	long lookup(long nDivs, long value) {
		long nextDivs  = nDivs + 1;
		long nextValue = value * nextDivs; 
		
		for(long b = nDivs+1; join(value/nDivs,b) < nextValue; b++)
			for(long a = nDivs; a > 1; a--) {
				if(! divededOnce(value,a))
						continue;
				long abValue = join(value / a,b);
				if(isTriangle(abValue))
					return abValue;
		}
		
		return lookup(nextDivs,nextValue);
	}
	
	boolean divededOnce(long value, long div) {
		if(value % div == 0) {
			if((value / div) % div == 0)
				return false;
			else
				return true;
		} else 
			throw new RuntimeException(
					"Unexpected:"+value+" not divided by "+div);
	}
	
	
	long joinAllUpTo(long max) {
		long value = 1;
		
		for(long d=1; d <= max; d++)
			value = join(value,d);
		
		return value;
	}
	
	long join(long value,long div) {
		return value * div/mdc(value,div);
	}
		
	
	boolean isTriangle(long t) {
		
		double r = (Math.sqrt(1 + 8 * (double) t)-1)/2;
		
		return r == Math.floor(r);
	}
	
	@ParameterizedTest
	@CsvSource({"1", "3", "6", "10", "15", "21", "28"})
	public void testIsTriangleTrue(long t) {
		assertTrue(isTriangle(t));
	}
	
	@ParameterizedTest
	@CsvSource({
		"2", "4", "5", "7", "8", "9", 
		"11", "12", "13", "14", "16", "17", "18", "19", 
		"20", "22", "23", "24", "25", "26", "27", "29"})
	public void testIsTriangleFalse(long t) {
		assertFalse(isTriangle(t));
	}

	
	long mdc(long a, long b) {
		if(a < b) {
			long t = b;
			b = a;
			a = t;
		}
		long r = a % b; 	
		
		return r == 0 ? b : mdc(b,a%b) ;
	}
	
	public static void main(String[] args) {
		new P012(); 
	}

}
